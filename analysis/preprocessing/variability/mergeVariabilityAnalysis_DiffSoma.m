%% Merge length and contirbuting cells features of axons and dendrites
% Output: MergedAxonDend_DiffSoma.mat
% Requires: *_Axon.mat and *_Dendrite.mat from each soma distribution
% (generated by save_variabilityAnalysis_DiffSoma.m)
% 
% Author: Daniel Udvary (Max Planck Institute for Neurobiology of Behavior â€“ caesar)
clear all
close all
clc

matlabPath = 'D:\udvary-et-al-2022\analysis\';
dataPath = [matlabPath 'preprocessing\data\variability\']; 
outputPath = [matlabPath 'data\variability\']; 

numVoxels = 512; 
idList = 21:24;
numSamples = 13; 
Ncombs = 500; 

%%
CV_Len = nan(1,numSamples);
CV_CC = nan(1,numSamples);

for i = 1:numSamples
       
    lentmp = nan(numVoxels,Ncombs*Ncombs*length(idList)); 
    cctmp = nan(numVoxels,Ncombs*Ncombs*length(idList)); 

    for j = 1:length(idList)
    
        idx = [Ncombs*Ncombs*(j-1)+1 Ncombs*Ncombs*(j)]; 
        axon = load([dataPath 'RBC_' ...
                        num2str(idList(j)) '_Axon.mat'],'results'); 
        dend = load([dataPath 'RBC_' ...
                        num2str(idList(j)) '_Dendrite.mat'],'results'); 
        
        % NumVoxels x Combinations
        axon_lentmp = axon.results{i}.len;
        axon_cctmp = axon.results{i}.contributingCells;      
        dend_lentmp = dend.results{i}.len;
        dend_cctmp = dend.results{i}.contributingCells;  

        if size(axon_lentmp,2)~=size(dend_lentmp,2)
           error('Not same number of combinations (length)'); 
        end
        if size(axon_cctmp,2)~=size(dend_cctmp,2)
           error('Not same number of combinations (cc)'); 
        end
        if size(axon_cctmp,2)~=size(axon_lentmp,2)
           error('Not same number of combinations (len and cc)'); 
        end
        if size(axon_lentmp,2)~=Ncombs
           error('intial number of combinations not consistent'); 
        end

        % All combinations between axon and dendrite combinations
        % -> 500 x 500
        % -> sort by cube
        % -> NumVoxels x Combinations (500x500)
        for v = 1:numVoxels
            x = repmat(axon_lentmp(v,:),Ncombs,1) + ...
                repmat(dend_lentmp(v,:)',1,Ncombs);
            lentmp(v,idx(1):idx(2)) = x(:); 
        end

        for v = 1:numVoxels
            x = repmat(axon_cctmp(v,:),Ncombs,1) + ...
                repmat(dend_cctmp(v,:)',1,Ncombs);
            cctmp(v,idx(1):idx(2)) = x(:); 
        end
        fprintf('%d (RBC_%d) done\n',i,idList(j));
    end
    
    % Over combinations -> NumVoxels x 1
    % Only save median over combinations
    tmp = std(lentmp,[],2)./mean(lentmp,2);
    CV_Len(i) = median(tmp);

    tmp = std(cctmp,[],2)./mean(cctmp,2);
    CV_CC(i) = median(tmp);
end

%%
save([outputPath 'MergedAxonDend_DiffSoma.mat'],'CV_CC','CV_Len'); 